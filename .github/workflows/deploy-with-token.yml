name: Deploy Full Component

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      
      - name: Create project structure
        run: |
          mkdir -p public src/components
      
      - name: Create package.json with Tailwind
        run: |
          echo '{
            "name": "process-data-model",
            "version": "0.1.0",
            "homepage": "https://rohoagave.github.io/Process-Data-Model",
            "private": true,
            "dependencies": {
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "react-scripts": "5.0.1",
              "recharts": "^2.5.0",
              "tailwindcss": "^3.3.3",
              "autoprefixer": "^10.4.14",
              "postcss": "^8.4.27"
            },
            "scripts": {
              "start": "react-scripts start",
              "build": "react-scripts build",
              "test": "react-scripts test",
              "eject": "react-scripts eject"
            },
            "browserslist": {
              "production": [
                ">0.2%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            }
          }' > package.json
      
      - name: Create Tailwind config
        run: |
          echo "module.exports = {
            content: [
              './src/**/*.{js,jsx,ts,tsx}',
              './public/index.html'
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }" > tailwind.config.js
          
          echo "@tailwind base;
          @tailwind components;
          @tailwind utilities;" > src/index.css
      
      - name: Create HTML and JS files
        run: |
          echo '<!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <title>Agave Production Estimator</title>
            </head>
            <body>
              <div id="root"></div>
            </body>
          </html>' > public/index.html
          
          echo 'import React from "react";
          import ReactDOM from "react-dom/client";
          import "./index.css";
          import App from "./App";
          
          const root = ReactDOM.createRoot(document.getElementById("root"));
          root.render(
            <React.StrictMode>
              <App />
            </React.StrictMode>
          );' > src/index.js
          
          echo 'import React from "react";
          import ProductionEstimator from "./components/ProductionEstimator";
          
          function App() {
            return (
              <div className="App">
                <header className="bg-gray-800 text-white p-4">
                  <h1 className="text-3xl font-bold">Agave Production Estimator</h1>
                  <p className="mt-2">Track and forecast agave production and distribution</p>
                </header>
                <main className="container mx-auto py-6 px-4">
                  <ProductionEstimator />
                </main>
              </div>
            );
          }
          
          export default App;' > src/App.js
      
      - name: Create full ProductionEstimator component
        run: |
          cat > src/components/ProductionEstimator.js << 'EOL'
          import React, { useState } from 'react';
          import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

          const ProductionEstimator = () => {
            // Helper functions for date manipulation without dependencies
            const formatDate = (date) => {
              const month = date.getMonth() + 1;
              const day = date.getDate();
              const year = date.getFullYear();
              // UK date format: day/month/year
              return `${day}/${month}/${year}`;
            };
            
            // Format month as 3-letter abbreviation
            const formatMonthAbbrev = (monthNum) => {
              const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
              return months[monthNum - 1];
            };
            
            const addWeeks = (date, weeks) => {
              const newDate = new Date(date);
              newDate.setDate(newDate.getDate() + weeks * 7);
              return newDate;
            };
            
            const parseDate = (dateString) => {
              try {
                const parts = dateString.split('/');
                if (parts.length === 3) {
                  // For UK format (DD/MM/YYYY), parts[0] is day, parts[1] is month
                  // Month is 0-indexed in JavaScript Date
                  return new Date(parts[2], parts[1] - 1, parts[0]);
                }
                return new Date();
              } catch (e) {
                console.error("Invalid date format", e);
                return new Date();
              }
            };

            // Initial data based on specifications
            const generateInitialData = (bottleRatio = 2) => {
              const rows = [];
              let currentBatch = 20;
              let currentDate = new Date('2025-03-07');
              let currentAgave = 65;
              
              for (let i = 0; i < 10; i++) {
                // Calculate values based on rules
                const fermentedLiquid = currentAgave * 35;
                const bottles = currentAgave * bottleRatio;
                
                rows.push({
                  id: i,
                  batch: currentBatch,
                  date: currentDate,
                  agave: currentAgave,
                  fermentedLiquid: fermentedLiquid,
                  bottleRatio: bottleRatio,
                  bottles: bottles,
                  // Default Kenya sales as 30% of total bottles
                  kenyaSales: Math.round(bottles * 0.3)
                });
                
                // Increment for next row
                currentBatch += 1;
                currentDate = addWeeks(currentDate, 3);
                currentAgave = Math.min(currentAgave + 5, 100); // Cap at 100
              }
              
              return rows;
            };
            
            const [data, setData] = useState(generateInitialData());
            
            // Prepare data for the bottles distribution chart
            const prepareDistributionData = () => {
              let monthlyData = {};
              let cumulativeKenya = 0;
              let cumulativeUK = 0;
              
              // Sort data by date to ensure proper ordering
              const sortedData = [...data].sort((a, b) => a.date - b.date);
              
              // Group by month and year
              sortedData.forEach(row => {
                const date = row.date;
                const monthYear = `${formatMonthAbbrev(date.getMonth() + 1)} ${date.getFullYear()}`;
                
                // Calculate sales breakdown
                const kenyaSales = row.kenyaSales || 0;
                const ukSales = row.bottles - kenyaSales;
                
                // Add to cumulative totals
                cumulativeKenya += kenyaSales;
                cumulativeUK += ukSales;
                
                if (!monthlyData[monthYear]) {
                  monthlyData[monthYear] = {
                    month: monthYear,
                    bottles: row.bottles,
                    kenya: kenyaSales,
                    uk: ukSales,
                    cumulativeKenya: cumulativeKenya,
                    cumulativeUK: cumulativeUK,
                    cumulativeTotal: cumulativeKenya + cumulativeUK,
                    // Store the month number for sorting
                    monthNum: date.getMonth() + 1,
                    yearNum: date.getFullYear()
                  };
                } else {
                  monthlyData[monthYear].bottles += row.bottles;
                  monthlyData[monthYear].kenya += kenyaSales;
                  monthlyData[monthYear].uk += ukSales;
                  monthlyData[monthYear].cumulativeKenya = cumulativeKenya;
                  monthlyData[monthYear].cumulativeUK = cumulativeUK;
                  monthlyData[monthYear].cumulativeTotal = cumulativeKenya + cumulativeUK;
                }
              });
              
              // Sort by year and month to ensure chronological order in chart
              return Object.values(monthlyData)
                .sort((a, b) => {
                  if (a.yearNum !== b.yearNum) return a.yearNum - b.yearNum;
                  return a.monthNum - b.monthNum;
                });
            };

            // Handle field changes
            const handleChange = (id, field, value) => {
              const updatedData = data.map(row => {
                if (row.id === id) {
                  // Handle date separately since it's a special type
                  if (field === 'date') {
                    try {
                      const dateValue = parseDate(value);
                      return { ...row, [field]: dateValue };
                    } catch (e) {
                      console.error("Invalid date format", e);
                      return row;
                    }
                  } else {
                    // For numerical values, convert to number
                    const numValue = field !== 'batch' ? parseFloat(value) : parseInt(value);
                    const updatedRow = { ...row, [field]: isNaN(numValue) ? value : numValue };
                    
                    // Recalculate dependent values
                    if (field === 'agave') {
                      updatedRow.fermentedLiquid = numValue * 35;
                      updatedRow.bottles = numValue * updatedRow.bottleRatio;
                      // If bottles change, maintain Kenya sales proportion if possible
                      if (row.bottles > 0) {
                        const kenyaRatio = row.kenyaSales / row.bottles;
                        updatedRow.kenyaSales = Math.min(
                          Math.round(updatedRow.bottles * kenyaRatio),
                          updatedRow.bottles
                        );
                      } else {
                        updatedRow.kenyaSales = Math.round(updatedRow.bottles * 0.3);
                      }
                    } else if (field === 'bottleRatio') {
                      updatedRow.bottles = row.agave * numValue;
                      // If bottles change, maintain Kenya sales proportion if possible
                      if (row.bottles > 0) {
                        const kenyaRatio = row.kenyaSales / row.bottles;
                        updatedRow.kenyaSales = Math.min(
                          Math.round(updatedRow.bottles * kenyaRatio),
                          updatedRow.bottles
                        );
                      } else {
                        updatedRow.kenyaSales = Math.round(updatedRow.bottles * 0.3);
                      }
                    } else if (field === 'kenyaSales') {
                      // Ensure Kenya sales don't exceed total bottles
                      updatedRow.kenyaSales = Math.min(numValue, updatedRow.bottles);
                    }
                    
                    return updatedRow;
                  }
                }
                return row;
              });
              
              setData(updatedData);
            };
            
            // Apply bottle ratio change to all rows
            const handleGlobalBottleRatioChange = (newRatio) => {
              const numRatio = parseFloat(newRatio);
              if (isNaN(numRatio)) return;
              
              const updatedData = data.map(row => {
                const newBottles = row.agave * numRatio;
                // Maintain the same Kenya sales proportion when total bottles change
                let newKenyaSales;
                if (row.bottles > 0) {
                  const kenyaRatio = row.kenyaSales / row.bottles;
                  newKenyaSales = Math.min(Math.round(newBottles * kenyaRatio), newBottles);
                } else {
                  newKenyaSales = Math.round(newBottles * 0.3);
                }
                
                return {
                  ...row,
                  bottleRatio: numRatio,
                  bottles: newBottles,
                  kenyaSales: newKenyaSales
                };
              });
              
              setData(updatedData);
            };

            // Custom label renderer for chart to display totals above bars
            const renderCustomBarLabel = ({ x, y, width, value }) => {
              return (
                <text 
                  x={x + width / 2} 
                  y={y - 10} 
                  fill="#000" 
                  textAnchor="middle" 
                  dominantBaseline="middle"
                >
                  {`Total: ${value}`}
                </text>
              );
            };

            return (
              <div className="p-4">
                <h2 className="text-2xl font-bold mb-4">Production Estimator Model</h2>
                
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Global Agave-to-Bottles Ratio:
                  </label>
                  <div className="flex items-center">
                    <input
                      type="number"
                      step="0.1"
                      min="0.1"
                      defaultValue="2"
                      onChange={(e) => handleGlobalBottleRatioChange(e.target.value)}
                      className="w-24 p-1 border rounded mr-2"
                    />
                    <span className="text-sm text-gray-500">
                      (Changes ratio for all batches)
                    </span>
                  </div>
                </div>
                
                <div className="overflow-x-auto">
                  <table className="min-w-full bg-white border border-gray-200">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="py-2 px-4 border">Batch</th>
                        <th className="py-2 px-4 border">Date</th>
                        <th className="py-2 px-4 border">Agave pieces</th>
                        <th className="py-2 px-4 border">Fermented liquid</th>
                        <th className="py-2 px-4 border">Bottles Ratio</th>
                        <th className="py-2 px-4 border">Bottles</th>
                        <th className="py-2 px-4 border">Kenya Sales</th>
                      </tr>
                    </thead>
                    <tbody>
                      {data.map(row => (
                        <tr key={row.id}>
                          <td className="py-2 px-4 border">
                            <input
                              type="number"
                              value={row.batch}
                              onChange={(e) => handleChange(row.id, 'batch', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                          <td className="py-2 px-4 border">
                            <input
                              type="text"
                              value={formatDate(row.date)}
                              onChange={(e) => handleChange(row.id, 'date', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                          <td className="py-2 px-4 border">
                            <input
                              type="number"
                              value={row.agave}
                              onChange={(e) => handleChange(row.id, 'agave', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                          <td className="py-2 px-4 border">
                            <input
                              type="number"
                              value={row.fermentedLiquid}
                              onChange={(e) => handleChange(row.id, 'fermentedLiquid', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                          <td className="py-2 px-4 border">
                            <input
                              type="number"
                              step="0.1"
                              value={row.bottleRatio}
                              onChange={(e) => handleChange(row.id, 'bottleRatio', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                          <td className="py-2 px-4 border">
                            <input
                              type="number"
                              value={row.bottles}
                              onChange={(e) => handleChange(row.id, 'bottles', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                          <td className="py-2 px-4 border">
                            <input
                              type="number"
                              value={row.kenyaSales}
                              onChange={(e) => handleChange(row.id, 'kenyaSales', e.target.value)}
                              className="w-full p-1 border rounded"
                            />
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-bold mb-2">Production Summary</h3>
                    <div className="bg-gray-50 p-4 rounded border">
                      <p className="mb-1">Total Agave Pieces: {data.reduce((sum, row) => sum + row.agave, 0)}</p>
                      <p className="mb-1">Total Fermented Liquid: {data.reduce((sum, row) => sum + row.fermentedLiquid, 0)}</p>
                      <p className="mb-1">Total Bottles: {data.reduce((sum, row) => sum + row.bottles, 0)}</p>
                      <p className="mb-1">Average Bottle Ratio: {(data.reduce((sum, row) => sum + row.bottleRatio, 0) / data.length).toFixed(2)}</p>
                      <p className="mb-1">Total Kenya Sales: {data.reduce((sum, row) => sum + (row.kenyaSales || 0), 0)}</p>
                      <p>Total UK Sales: {data.reduce((sum, row) => sum + (row.bottles - (row.kenyaSales || 0)), 0)}</p>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-bold mb-2">Cumulative Bottles Distribution by Market</h3>
                    
                    <div className="bg-white p-2 rounded border" style={{ height: '300px' }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart
                          data={prepareDistributionData()}
                          margin={{ top: 20, right: 30, left: 20, bottom: 40 }}
                        >
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis 
                            dataKey="month" 
                            angle={-45} 
                            textAnchor="end" 
                            height={60}
                            label={{ value: 'Month/Year', position: 'insideBottom', offset: -15 }}
                          />
                          <YAxis 
                            label={{ value: 'Cumulative Bottle Count', angle: -90, position: 'insideLeft', offset: 10 }}
                          />
                          <Tooltip 
                            formatter={(value, name) => {
                              if (name === "cumulativeKenya") {
                                return [`${value} bottles`, "Kenya Market (Cumulative)"];
                              } else if (name === "cumulativeUK") {
                                return [`${value} bottles`, "UK Market (Cumulative)"];
                              }
                              return [`${value} bottles`, name];
                            }}
                            labelFormatter={(label) => `Month: ${label}`}
                          />
                          <Legend wrapperStyle={{ paddingTop: '10px' }} />
                          <Bar 
                            dataKey="cumulativeKenya" 
                            stackId="a" 
                            fill="#FF9800" 
                            name="Kenya Sales (Cumulative)" 
                          />
                          <Bar 
                            dataKey="cumulativeUK" 
                            stackId="a" 
                            fill="#4CAF50" 
                            name="UK Sales (Cumulative)" 
                          />
                          <Bar 
                            dataKey="cumulativeTotal" 
                            fill="transparent" 
                            isAnimationActive={false}
                            label={renderCustomBarLabel}
                          />
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                  </div>
                </div>
              </div>
            );
          };

          export default ProductionEstimator;
          EOL
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install --no-package-lock
      
      - name: Build
        run: npm run build
        env:
          CI: false
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          force_orphan: true
